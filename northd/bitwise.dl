/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Returns true if and only if 'x' is a power of 2.
 */
function is_power_of_two(x: u8): bool { x != 0 and (x & (x - 1)) == 0 }
function is_power_of_two(x: u16): bool { x != 0 and (x & (x - 1)) == 0 }
function is_power_of_two(x: u32): bool { x != 0 and (x & (x - 1)) == 0 }
function is_power_of_two(x: u64): bool { x != 0 and (x & (x - 1)) == 0 }
function is_power_of_two(x: u128): bool { x != 0 and (x & (x - 1)) == 0 }

/*
 * Returns the next power of 2 greater than 'x', or None if that's bigger than the
 * type's maximum value.
 */
function next_power_of_two(x: u8): Option<u8> { u8_next_power_of_two(x) }
function next_power_of_two(x: u16): Option<u16> { u16_next_power_of_two(x) }
function next_power_of_two(x: u32): Option<u32> { u32_next_power_of_two(x) }
function next_power_of_two(x: u64): Option<u64> { u64_next_power_of_two(x) }
function next_power_of_two(x: u128): Option<u128> { u128_next_power_of_two(x) }

extern function u8_next_power_of_two(x: u8): Option<u8>
extern function u16_next_power_of_two(x: u16): Option<u16>
extern function u32_next_power_of_two(x: u32): Option<u32>
extern function u64_next_power_of_two(x: u64): Option<u64>
extern function u128_next_power_of_two(x: u128): Option<u128>

/*
 * Returns the next power of 2 greater than 'x', or 0 if that's bigger than the
 * type's maximum value.
 */
function wrapping_next_power_of_two(x: u8): u8 { u8_wrapping_next_power_of_two(x) }
function wrapping_next_power_of_two(x: u16): u16 { u16_wrapping_next_power_of_two(x) }
function wrapping_next_power_of_two(x: u32): u32 { u32_wrapping_next_power_of_two(x) }
function wrapping_next_power_of_two(x: u64): u64 { u64_wrapping_next_power_of_two(x) }
function wrapping_next_power_of_two(x: u128): u128 { u128_wrapping_next_power_of_two(x) }

extern function u8_wrapping_next_power_of_two(x: u8): u8
extern function u16_wrapping_next_power_of_two(x: u16): u16
extern function u32_wrapping_next_power_of_two(x: u32): u32
extern function u64_wrapping_next_power_of_two(x: u64): u64
extern function u128_wrapping_next_power_of_two(x: u128): u128

/*
 * Number of 1-bits in the binary representation of 'x'.
 */
function count_ones(x: u8): u32 { u8_count_ones(x) }
function count_ones(x: u16): u32 { u16_count_ones(x) }
function count_ones(x: u32): u32 { u32_count_ones(x) }
function count_ones(x: u64): u32 { u64_count_ones(x) }
function count_ones(x: u128): u32 { u128_count_ones(x) }

extern function u8_count_ones(x: u8): u32
extern function u16_count_ones(x: u16): u32
extern function u32_count_ones(x: u32): u32
extern function u64_count_ones(x: u64): u32
extern function u128_count_ones(x: u128): u32

/*
 * Number of 0-bits in the binary representation of 'x'.
 */
function count_zeros(x: u8): u32 { u8_count_zeros(x) }
function count_zeros(x: u16): u32 { u16_count_zeros(x) }
function count_zeros(x: u32): u32 { u32_count_zeros(x) }
function count_zeros(x: u64): u32 { u64_count_zeros(x) }
function count_zeros(x: u128): u32 { u128_count_zeros(x) }

extern function u8_count_zeros(x: u8): u32
extern function u16_count_zeros(x: u16): u32
extern function u32_count_zeros(x: u32): u32
extern function u64_count_zeros(x: u64): u32
extern function u128_count_zeros(x: u128): u32

/*
 * Number of leading 0-bits in the binary representation of 'x'.
 */
function leading_zeros(x: u8): u32 { u8_leading_zeros(x) }
function leading_zeros(x: u16): u32 { u16_leading_zeros(x) }
function leading_zeros(x: u32): u32 { u32_leading_zeros(x) }
function leading_zeros(x: u64): u32 { u64_leading_zeros(x) }
function leading_zeros(x: u128): u32 { u128_leading_zeros(x) }

extern function u8_leading_zeros(x: u8): u32
extern function u16_leading_zeros(x: u16): u32
extern function u32_leading_zeros(x: u32): u32
extern function u64_leading_zeros(x: u64): u32
extern function u128_leading_zeros(x: u128): u32

/*
 * Number of leading 1-bits in the binary representation of 'x'.
 */
function leading_ones(x: u8): u32 { u8_leading_ones(x) }
function leading_ones(x: u16): u32 { u16_leading_ones(x) }
function leading_ones(x: u32): u32 { u32_leading_ones(x) }
function leading_ones(x: u64): u32 { u64_leading_ones(x) }
function leading_ones(x: u128): u32 { u128_leading_ones(x) }

extern function u8_leading_ones(x: u8): u32
extern function u16_leading_ones(x: u16): u32
extern function u32_leading_ones(x: u32): u32
extern function u64_leading_ones(x: u64): u32
extern function u128_leading_ones(x: u128): u32

/*
 * Number of trailing 0-bits in the binary representation of 'x'.
 */
function trailing_zeros(x: u8): u32 { u8_trailing_zeros(x) }
function trailing_zeros(x: u16): u32 { u16_trailing_zeros(x) }
function trailing_zeros(x: u32): u32 { u32_trailing_zeros(x) }
function trailing_zeros(x: u64): u32 { u64_trailing_zeros(x) }
function trailing_zeros(x: u128): u32 { u128_trailing_zeros(x) }

extern function u8_trailing_zeros(x: u8): u32
extern function u16_trailing_zeros(x: u16): u32
extern function u32_trailing_zeros(x: u32): u32
extern function u64_trailing_zeros(x: u64): u32
extern function u128_trailing_zeros(x: u128): u32

/*
 * Number of trailing 0-bits in the binary representation of 'x'.
 */
function trailing_ones(x: u8): u32 { u8_trailing_ones(x) }
function trailing_ones(x: u16): u32 { u16_trailing_ones(x) }
function trailing_ones(x: u32): u32 { u32_trailing_ones(x) }
function trailing_ones(x: u64): u32 { u64_trailing_ones(x) }
function trailing_ones(x: u128): u32 { u128_trailing_ones(x) }

extern function u8_trailing_ones(x: u8): u32
extern function u16_trailing_ones(x: u16): u32
extern function u32_trailing_ones(x: u32): u32
extern function u64_trailing_ones(x: u64): u32
extern function u128_trailing_ones(x: u128): u32

/*
 * Reverses the order of bits in 'x'.
 */
function reverse_bits(x: u8): u8 { u8_reverse_bits(x) }
function reverse_bits(x: u16): u16 { u16_reverse_bits(x) }
function reverse_bits(x: u32): u32 { u32_reverse_bits(x) }
function reverse_bits(x: u64): u64 { u64_reverse_bits(x) }
function reverse_bits(x: u128): u128 { u128_reverse_bits(x) }

extern function u8_reverse_bits(x: u8): u8
extern function u16_reverse_bits(x: u16): u16
extern function u32_reverse_bits(x: u32): u32
extern function u64_reverse_bits(x: u64): u64
extern function u128_reverse_bits(x: u128): u128

/*
 * Reverses the order of bytes in 'x'.
 */
function swap_bytes(x: u8): u8 { u8_swap_bytes(x) }
function swap_bytes(x: u16): u16 { u16_swap_bytes(x) }
function swap_bytes(x: u32): u32 { u32_swap_bytes(x) }
function swap_bytes(x: u64): u64 { u64_swap_bytes(x) }
function swap_bytes(x: u128): u128 { u128_swap_bytes(x) }

extern function u8_swap_bytes(x: u8): u8
extern function u16_swap_bytes(x: u16): u16
extern function u32_swap_bytes(x: u32): u32
extern function u64_swap_bytes(x: u64): u64
extern function u128_swap_bytes(x: u128): u128

/*
 * Converts 'x' from big endian to the machine's native endianness.
 * On a big-endian machine it is a no-op.
 * On a little-end machine it is equivalent to swap_bytes().
 */
function from_be(x: u8): u8 { u8_from_be(x) }
function from_be(x: u16): u16 { u16_from_be(x) }
function from_be(x: u32): u32 { u32_from_be(x) }
function from_be(x: u64): u64 { u64_from_be(x) }
function from_be(x: u128): u128 { u128_from_be(x) }

extern function u8_from_be(x: u8): u8
extern function u16_from_be(x: u16): u16
extern function u32_from_be(x: u32): u32
extern function u64_from_be(x: u64): u64
extern function u128_from_be(x: u128): u128

/*
 * Converts 'x' from the machine's native endianness to big endian.
 * On a big-endian machine it is a no-op.
 * On a little-endian machine it is equivalent to swap_bytes().
 */
function to_be(x: u8): u8 { u8_to_be(x) }
function to_be(x: u16): u16 { u16_to_be(x) }
function to_be(x: u32): u32 { u32_to_be(x) }
function to_be(x: u64): u64 { u64_to_be(x) }
function to_be(x: u128): u128 { u128_to_be(x) }

extern function u8_to_be(x: u8): u8
extern function u16_to_be(x: u16): u16
extern function u32_to_be(x: u32): u32
extern function u64_to_be(x: u64): u64
extern function u128_to_be(x: u128): u128

/*
 * Converts 'x' from little endian to the machine's native endianness.
 * On a little-endian machine it is a no-op.
 * On a big-endian machine it is equivalent to swap_bytes().
 */
function from_le(x: u8): u8 { u8_from_le(x) }
function from_le(x: u16): u16 { u16_from_le(x) }
function from_le(x: u32): u32 { u32_from_le(x) }
function from_le(x: u64): u64 { u64_from_le(x) }
function from_le(x: u128): u128 { u128_from_le(x) }

extern function u8_from_le(x: u8): u8
extern function u16_from_le(x: u16): u16
extern function u32_from_le(x: u32): u32
extern function u64_from_le(x: u64): u64
extern function u128_from_le(x: u128): u128

/*
 * Converts 'x' from the machine's native endianness to little endian.
 * On a little-endian machine it is a no-op.
 * On a big-endian machine it is equivalent to swap_bytes().
 */
function to_le(x: u8): u8 { u8_to_le(x) }
function to_le(x: u16): u16 { u16_to_le(x) }
function to_le(x: u32): u32 { u32_to_le(x) }
function to_le(x: u64): u64 { u64_to_le(x) }
function to_le(x: u128): u128 { u128_to_le(x) }

extern function u8_to_le(x: u8): u8
extern function u16_to_le(x: u16): u16
extern function u32_to_le(x: u32): u32
extern function u64_to_le(x: u64): u64
extern function u128_to_le(x: u128): u128

/*
 * Rotates the bits in 'x' left by 'n' positions.
 */
function rotate_left(x: u8, n: u32): u8 { u8_rotate_left(x, n) }
function rotate_left(x: u16, n: u32): u16 { u16_rotate_left(x, n) }
function rotate_left(x: u32, n: u32): u32 { u32_rotate_left(x, n) }
function rotate_left(x: u64, n: u32): u64 { u64_rotate_left(x, n) }
function rotate_left(x: u128, n: u32): u128 { u128_rotate_left(x, n) }

extern function u8_rotate_left(x: u8, n: u32): u8
extern function u16_rotate_left(x: u16, n: u32): u16
extern function u32_rotate_left(x: u32, n: u32): u32
extern function u64_rotate_left(x: u64, n: u32): u64
extern function u128_rotate_left(x: u128, n: u32): u128

/*
 * Rotates the bits in 'x' right by 'n' positions.
 */
function rotate_right(x: u8, n: u32): u8 { u8_rotate_right(x, n) }
function rotate_right(x: u16, n: u32): u16 { u16_rotate_right(x, n) }
function rotate_right(x: u32, n: u32): u32 { u32_rotate_right(x, n) }
function rotate_right(x: u64, n: u32): u64 { u64_rotate_right(x, n) }
function rotate_right(x: u128, n: u32): u128 { u128_rotate_right(x, n) }

extern function u8_rotate_right(x: u8, n: u32): u8
extern function u16_rotate_right(x: u16, n: u32): u16
extern function u32_rotate_right(x: u32, n: u32): u32
extern function u64_rotate_right(x: u64, n: u32): u64
extern function u128_rotate_right(x: u128, n: u32): u128
