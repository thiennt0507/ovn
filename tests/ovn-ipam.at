AT_BANNER([OVN unit tests - IPAM])

AT_SETUP([unit test -- init_ipam_ipv4])
ovn_start

# Valid subnet, no exclude IPs
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1
])

# Valid subnet, single exclude IP
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29 192.168.0.3], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1 192.168.0.3
])

# Valid subnet, two exclude IPs
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29 "192.168.0.3 192.168.0.5"], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1 192.168.0.3 192.168.0.5
])

# Valid subnet, range of exclude IPs
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29 "192.168.0.3..192.168.0.5"], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1 192.168.0.3 192.168.0.4 192.168.0.5
])

# Valid subnet, exclude IP outside of subnet
# Excluded IP should be ignored.
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29 192.168.0.9], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1
])

# Valid subnet, range of exclude IPs starts in subnet but ends outside
# Excluded IPs inside the subnet should be allocated
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29 "192.168.0.5..192.168.0.11"], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1 192.168.0.5 192.168.0.6 192.168.0.7
])

# Valid subnet, range of exclude IPs starts outside subnet but ends inside
# Excluded IPs inside the subnet should be allocated
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.8/29 "192.168.0.5..192.168.0.11"], [0], [dnl
start_ipv4: 192.168.0.9
total_ipv4s: 7
allocated_ipv4s: 192.168.0.9 192.168.0.10 192.168.0.11
])

# Valid subnet, range of exclude IPs starts before and ends after the subnet
# Entire subnet should be allocated
# XXX Should excluding every address in a subnet be an invalid configuration?
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.8/29 "192.168.0.5..192.168.0.18"], [0], [dnl
start_ipv4: 192.168.0.9
total_ipv4s: 7
allocated_ipv4s: 192.168.0.9 192.168.0.10 192.168.0.11 192.168.0.12 192.168.0.13 192.168.0.14 192.168.0.15
])

# Valid subnet, inverted exclude range
# Exclude range should be ignored
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/29 "192.168.0.5..192.168.0.2"], [0], [dnl
start_ipv4: 192.168.0.1
total_ipv4s: 7
allocated_ipv4s: 192.168.0.1
])

# XXX At this point, I wanted to insert some tests where I put in invalid
# IP addresses like 400.500.600.700 to ensure that the start_ipv4 was set
# to "0.0.0.0". However, ovs_scan_ip_masked() does no validation of the
# IP address. So long as the given IP address follows the format of
# xxx.xxx.xxx.xxx, it's seen as valid. In the specific case of
# "400.500.600.700", it ends up setting the start_ipv4 to
# "144.244.88.185". This result is probably system-dependent.

# Invalid subnet: Bad mask
AT_CHECK([ovstest test-ipam ipam_init_ipv4 192.168.0.0/-69], [0], [dnl
start_ipv4: 0.0.0.0
total_ipv4s: 0
allocated_ipv4s:
])

AT_CLEANUP

AT_SETUP([unit test -- init_ipam_ipv6_prefix])
ovn_start

# No prefix set
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix], [0], [dnl
ipv6_prefix_set: false
])

# Good prefix with no mask
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef0::], [0], [dnl
ipv6_prefix_set: true
ipv6_prefix: aef0::
])

# Good prefix with good mask
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef0::/64], [0], [dnl
ipv6_prefix_set: true
ipv6_prefix: aef0::
])

# Bad prefix with no mask
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef20::], [0], [dnl
ipv6_prefix_set: false
])

# Good prefix with nonsense mask.
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef0::/900], [0], [dnl
ipv6_prefix_set: false
])

# Good prefix with a non-/64 mask.
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef0::/32], [0], [dnl
ipv6_prefix_set: false
])

# Bad prefix and a non-/64 mask.
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef20::/32], [0], [dnl
ipv6_prefix_set: false
])

# Overspecify the IPv6 address.
# We should "round down" to the /64 network address.
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef0::2323], [0], [dnl
ipv6_prefix_set: true
ipv6_prefix: aef0::
])

# Overspecify the IPv6 address, and specify a mask.
# We should "round down" to the /64 network address.
AT_CHECK([ovstest test-ipam ipam_init_ipv6_prefix aef0::2323/64], [0], [dnl
ipv6_prefix_set: true
ipv6_prefix: aef0::
])

AT_CLEANUP

AT_SETUP([unit test -- ipam_get_unused_ip])
ovn_start

# Ensure first address returned by IPAM is .2, since .1 is reserved for the
# connected router
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 1], [0], [dnl
192.168.0.2
])

# Ensure that we only grab IPs within the requested subnet
# Ignore stderr so that the warning about address space being
# exhausted does not cause the test to fail
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 6], [0], [dnl
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
0.0.0.0
])

# Set up an exclude IP and ensure it does not get selected
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 4 192.168.0.3], [0], [dnl
192.168.0.2
192.168.0.4
192.168.0.5
192.168.0.6
])

# Set up an exclude IP range and ensure none gets selected
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 2 192.168.0.3..192.168.0.5], [0], [dnl
192.168.0.2
192.168.0.6
])

# Set up an exclude range from outside the subnet. Ensure it is ignored.
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 5 192.168.1.3..192.168.1.5], [0], [dnl
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
])

# Set up an exclude range from outside the subnet. Ensure we cannot assign
# addresses outside the subnet
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 6 192.168.1.3..192.168.1.5], [0], [dnl
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
0.0.0.0
])

# Set up an exclude range that starts before the subnet but ends in the subnet.
# The overlapping part should be excluded
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.8/29 2 192.168.0.2..192.168.0.12], [0], [dnl
192.168.0.13
192.168.0.14
])

# Set up an exclude range that starts in the subnet but ends after the subnet.
# The overlapping part should be excluded.
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.0/29 3 192.168.0.4..192.168.0.9], [0], [dnl
192.168.0.2
192.168.0.3
0.0.0.0
])

# Set up an exclude range that starts before the subnet and ends after the subnet.
# The entire range should be excluded.
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.8/29 1 192.168.0.2..192.168.0.18], [0], [dnl
0.0.0.0
])

# Configure the subnet using a starting IP that is not the network address of the
# subnet. Ensure that we "round it down" to the proper subnet starting point.
AT_CHECK([ovstest test-ipam ipam_get_unused_ip 192.168.0.4/29 5], [0], [dnl
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
])

AT_CLEANUP
